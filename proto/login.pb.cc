// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace login {

namespace {

const ::google::protobuf::Descriptor* c2l_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  c2l_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* l2c_head_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  l2c_head_reflection_ = NULL;
const ::google::protobuf::Descriptor* l2c_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  l2c_login_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2flogin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2flogin_2eproto() {
  protobuf_AddDesc_proto_2flogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/login.proto");
  GOOGLE_CHECK(file != NULL);
  c2l_login_descriptor_ = file->message_type(0);
  static const int c2l_login_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2l_login, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2l_login, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2l_login, user_pwd_),
  };
  c2l_login_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      c2l_login_descriptor_,
      c2l_login::default_instance_,
      c2l_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2l_login, _has_bits_[0]),
      -1,
      -1,
      sizeof(c2l_login),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(c2l_login, _internal_metadata_),
      -1);
  l2c_head_descriptor_ = file->message_type(1);
  static const int l2c_head_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(l2c_head, msg_id_),
  };
  l2c_head_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      l2c_head_descriptor_,
      l2c_head::default_instance_,
      l2c_head_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(l2c_head, _has_bits_[0]),
      -1,
      -1,
      sizeof(l2c_head),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(l2c_head, _internal_metadata_),
      -1);
  l2c_login_descriptor_ = file->message_type(2);
  static const int l2c_login_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(l2c_login, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(l2c_login, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(l2c_login, proxy_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(l2c_login, proxy_port_),
  };
  l2c_login_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      l2c_login_descriptor_,
      l2c_login::default_instance_,
      l2c_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(l2c_login, _has_bits_[0]),
      -1,
      -1,
      sizeof(l2c_login),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(l2c_login, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2flogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      c2l_login_descriptor_, &c2l_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      l2c_head_descriptor_, &l2c_head::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      l2c_login_descriptor_, &l2c_login::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2flogin_2eproto() {
  delete c2l_login::default_instance_;
  delete c2l_login_reflection_;
  delete l2c_head::default_instance_;
  delete l2c_head_reflection_;
  delete l2c_login::default_instance_;
  delete l2c_login_reflection_;
}

void protobuf_AddDesc_proto_2flogin_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021proto/login.proto\022\005login\"@\n\tc2l_login\022"
    "\016\n\006msg_id\030\001 \002(\005\022\021\n\tuser_name\030\002 \002(\t\022\020\n\010us"
    "er_pwd\030\003 \002(\t\"\032\n\010l2c_head\022\016\n\006msg_id\030\001 \002(\005"
    "\"Q\n\tl2c_login\022\016\n\006msg_id\030\001 \002(\005\022\016\n\006status\030"
    "\002 \002(\005\022\020\n\010proxy_ip\030\003 \002(\t\022\022\n\nproxy_port\030\004 "
    "\002(\005", 203);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/login.proto", &protobuf_RegisterTypes);
  c2l_login::default_instance_ = new c2l_login();
  l2c_head::default_instance_ = new l2c_head();
  l2c_login::default_instance_ = new l2c_login();
  c2l_login::default_instance_->InitAsDefaultInstance();
  l2c_head::default_instance_->InitAsDefaultInstance();
  l2c_login::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2flogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2flogin_2eproto {
  StaticDescriptorInitializer_proto_2flogin_2eproto() {
    protobuf_AddDesc_proto_2flogin_2eproto();
  }
} static_descriptor_initializer_proto_2flogin_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int c2l_login::kMsgIdFieldNumber;
const int c2l_login::kUserNameFieldNumber;
const int c2l_login::kUserPwdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

c2l_login::c2l_login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login.c2l_login)
}

void c2l_login::InitAsDefaultInstance() {
}

c2l_login::c2l_login(const c2l_login& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:login.c2l_login)
}

void c2l_login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_id_ = 0;
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

c2l_login::~c2l_login() {
  // @@protoc_insertion_point(destructor:login.c2l_login)
  SharedDtor();
}

void c2l_login::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void c2l_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* c2l_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return c2l_login_descriptor_;
}

const c2l_login& c2l_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2flogin_2eproto();
  return *default_instance_;
}

c2l_login* c2l_login::default_instance_ = NULL;

c2l_login* c2l_login::New(::google::protobuf::Arena* arena) const {
  c2l_login* n = new c2l_login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void c2l_login::Clear() {
// @@protoc_insertion_point(message_clear_start:login.c2l_login)
  if (_has_bits_[0 / 32] & 7u) {
    msg_id_ = 0;
    if (has_user_name()) {
      user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_pwd()) {
      user_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool c2l_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login.c2l_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msg_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // required string user_name = 2;
      case 2: {
        if (tag == 18) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login.c2l_login.user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_pwd;
        break;
      }

      // required string user_pwd = 3;
      case 3: {
        if (tag == 26) {
         parse_user_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_pwd().data(), this->user_pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login.c2l_login.user_pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login.c2l_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login.c2l_login)
  return false;
#undef DO_
}

void c2l_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login.c2l_login)
  // required int32 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_id(), output);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login.c2l_login.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_name(), output);
  }

  // required string user_pwd = 3;
  if (has_user_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_pwd().data(), this->user_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login.c2l_login.user_pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_pwd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:login.c2l_login)
}

::google::protobuf::uint8* c2l_login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:login.c2l_login)
  // required int32 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_id(), target);
  }

  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login.c2l_login.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // required string user_pwd = 3;
  if (has_user_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_pwd().data(), this->user_pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login.c2l_login.user_pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_pwd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login.c2l_login)
  return target;
}

int c2l_login::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:login.c2l_login)
  int total_size = 0;

  if (has_msg_id()) {
    // required int32 msg_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_id());
  }

  if (has_user_name()) {
    // required string user_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  if (has_user_pwd()) {
    // required string user_pwd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_pwd());
  }

  return total_size;
}
int c2l_login::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:login.c2l_login)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 msg_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_id());

    // required string user_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());

    // required string user_pwd = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_pwd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void c2l_login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login.c2l_login)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const c2l_login* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const c2l_login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login.c2l_login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login.c2l_login)
    MergeFrom(*source);
  }
}

void c2l_login::MergeFrom(const c2l_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login.c2l_login)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_user_name()) {
      set_has_user_name();
      user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
    }
    if (from.has_user_pwd()) {
      set_has_user_pwd();
      user_pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_pwd_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void c2l_login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login.c2l_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void c2l_login::CopyFrom(const c2l_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login.c2l_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool c2l_login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void c2l_login::Swap(c2l_login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void c2l_login::InternalSwap(c2l_login* other) {
  std::swap(msg_id_, other->msg_id_);
  user_name_.Swap(&other->user_name_);
  user_pwd_.Swap(&other->user_pwd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata c2l_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = c2l_login_descriptor_;
  metadata.reflection = c2l_login_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// c2l_login

// required int32 msg_id = 1;
bool c2l_login::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void c2l_login::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
void c2l_login::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void c2l_login::clear_msg_id() {
  msg_id_ = 0;
  clear_has_msg_id();
}
 ::google::protobuf::int32 c2l_login::msg_id() const {
  // @@protoc_insertion_point(field_get:login.c2l_login.msg_id)
  return msg_id_;
}
 void c2l_login::set_msg_id(::google::protobuf::int32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:login.c2l_login.msg_id)
}

// required string user_name = 2;
bool c2l_login::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void c2l_login::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
void c2l_login::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void c2l_login::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_name();
}
 const ::std::string& c2l_login::user_name() const {
  // @@protoc_insertion_point(field_get:login.c2l_login.user_name)
  return user_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void c2l_login::set_user_name(const ::std::string& value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.c2l_login.user_name)
}
 void c2l_login::set_user_name(const char* value) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.c2l_login.user_name)
}
 void c2l_login::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.c2l_login.user_name)
}
 ::std::string* c2l_login::mutable_user_name() {
  set_has_user_name();
  // @@protoc_insertion_point(field_mutable:login.c2l_login.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* c2l_login::release_user_name() {
  // @@protoc_insertion_point(field_release:login.c2l_login.user_name)
  clear_has_user_name();
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void c2l_login::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    set_has_user_name();
  } else {
    clear_has_user_name();
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:login.c2l_login.user_name)
}

// required string user_pwd = 3;
bool c2l_login::has_user_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void c2l_login::set_has_user_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
void c2l_login::clear_has_user_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
void c2l_login::clear_user_pwd() {
  user_pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_pwd();
}
 const ::std::string& c2l_login::user_pwd() const {
  // @@protoc_insertion_point(field_get:login.c2l_login.user_pwd)
  return user_pwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void c2l_login::set_user_pwd(const ::std::string& value) {
  set_has_user_pwd();
  user_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.c2l_login.user_pwd)
}
 void c2l_login::set_user_pwd(const char* value) {
  set_has_user_pwd();
  user_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.c2l_login.user_pwd)
}
 void c2l_login::set_user_pwd(const char* value, size_t size) {
  set_has_user_pwd();
  user_pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.c2l_login.user_pwd)
}
 ::std::string* c2l_login::mutable_user_pwd() {
  set_has_user_pwd();
  // @@protoc_insertion_point(field_mutable:login.c2l_login.user_pwd)
  return user_pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* c2l_login::release_user_pwd() {
  // @@protoc_insertion_point(field_release:login.c2l_login.user_pwd)
  clear_has_user_pwd();
  return user_pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void c2l_login::set_allocated_user_pwd(::std::string* user_pwd) {
  if (user_pwd != NULL) {
    set_has_user_pwd();
  } else {
    clear_has_user_pwd();
  }
  user_pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_pwd);
  // @@protoc_insertion_point(field_set_allocated:login.c2l_login.user_pwd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int l2c_head::kMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

l2c_head::l2c_head()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login.l2c_head)
}

void l2c_head::InitAsDefaultInstance() {
}

l2c_head::l2c_head(const l2c_head& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:login.l2c_head)
}

void l2c_head::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

l2c_head::~l2c_head() {
  // @@protoc_insertion_point(destructor:login.l2c_head)
  SharedDtor();
}

void l2c_head::SharedDtor() {
  if (this != default_instance_) {
  }
}

void l2c_head::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* l2c_head::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return l2c_head_descriptor_;
}

const l2c_head& l2c_head::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2flogin_2eproto();
  return *default_instance_;
}

l2c_head* l2c_head::default_instance_ = NULL;

l2c_head* l2c_head::New(::google::protobuf::Arena* arena) const {
  l2c_head* n = new l2c_head;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void l2c_head::Clear() {
// @@protoc_insertion_point(message_clear_start:login.l2c_head)
  msg_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool l2c_head::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login.l2c_head)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msg_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login.l2c_head)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login.l2c_head)
  return false;
#undef DO_
}

void l2c_head::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login.l2c_head)
  // required int32 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:login.l2c_head)
}

::google::protobuf::uint8* l2c_head::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:login.l2c_head)
  // required int32 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login.l2c_head)
  return target;
}

int l2c_head::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:login.l2c_head)
  int total_size = 0;

  // required int32 msg_id = 1;
  if (has_msg_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void l2c_head::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login.l2c_head)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const l2c_head* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const l2c_head>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login.l2c_head)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login.l2c_head)
    MergeFrom(*source);
  }
}

void l2c_head::MergeFrom(const l2c_head& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login.l2c_head)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void l2c_head::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login.l2c_head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void l2c_head::CopyFrom(const l2c_head& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login.l2c_head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool l2c_head::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void l2c_head::Swap(l2c_head* other) {
  if (other == this) return;
  InternalSwap(other);
}
void l2c_head::InternalSwap(l2c_head* other) {
  std::swap(msg_id_, other->msg_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata l2c_head::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = l2c_head_descriptor_;
  metadata.reflection = l2c_head_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// l2c_head

// required int32 msg_id = 1;
bool l2c_head::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void l2c_head::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
void l2c_head::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void l2c_head::clear_msg_id() {
  msg_id_ = 0;
  clear_has_msg_id();
}
 ::google::protobuf::int32 l2c_head::msg_id() const {
  // @@protoc_insertion_point(field_get:login.l2c_head.msg_id)
  return msg_id_;
}
 void l2c_head::set_msg_id(::google::protobuf::int32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:login.l2c_head.msg_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int l2c_login::kMsgIdFieldNumber;
const int l2c_login::kStatusFieldNumber;
const int l2c_login::kProxyIpFieldNumber;
const int l2c_login::kProxyPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

l2c_login::l2c_login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:login.l2c_login)
}

void l2c_login::InitAsDefaultInstance() {
}

l2c_login::l2c_login(const l2c_login& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:login.l2c_login)
}

void l2c_login::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_id_ = 0;
  status_ = 0;
  proxy_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proxy_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

l2c_login::~l2c_login() {
  // @@protoc_insertion_point(destructor:login.l2c_login)
  SharedDtor();
}

void l2c_login::SharedDtor() {
  proxy_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void l2c_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* l2c_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return l2c_login_descriptor_;
}

const l2c_login& l2c_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2flogin_2eproto();
  return *default_instance_;
}

l2c_login* l2c_login::default_instance_ = NULL;

l2c_login* l2c_login::New(::google::protobuf::Arena* arena) const {
  l2c_login* n = new l2c_login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void l2c_login::Clear() {
// @@protoc_insertion_point(message_clear_start:login.l2c_login)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(l2c_login, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<l2c_login*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(msg_id_, status_);
    if (has_proxy_ip()) {
      proxy_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    proxy_port_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool l2c_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:login.l2c_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msg_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_proxy_ip;
        break;
      }

      // required string proxy_ip = 3;
      case 3: {
        if (tag == 26) {
         parse_proxy_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxy_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxy_ip().data(), this->proxy_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login.l2c_login.proxy_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_proxy_port;
        break;
      }

      // required int32 proxy_port = 4;
      case 4: {
        if (tag == 32) {
         parse_proxy_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proxy_port_)));
          set_has_proxy_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:login.l2c_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:login.l2c_login)
  return false;
#undef DO_
}

void l2c_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:login.l2c_login)
  // required int32 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_id(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // required string proxy_ip = 3;
  if (has_proxy_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxy_ip().data(), this->proxy_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login.l2c_login.proxy_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->proxy_ip(), output);
  }

  // required int32 proxy_port = 4;
  if (has_proxy_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->proxy_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:login.l2c_login)
}

::google::protobuf::uint8* l2c_login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:login.l2c_login)
  // required int32 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_id(), target);
  }

  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // required string proxy_ip = 3;
  if (has_proxy_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxy_ip().data(), this->proxy_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login.l2c_login.proxy_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proxy_ip(), target);
  }

  // required int32 proxy_port = 4;
  if (has_proxy_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->proxy_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:login.l2c_login)
  return target;
}

int l2c_login::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:login.l2c_login)
  int total_size = 0;

  if (has_msg_id()) {
    // required int32 msg_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_id());
  }

  if (has_status()) {
    // required int32 status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (has_proxy_ip()) {
    // required string proxy_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proxy_ip());
  }

  if (has_proxy_port()) {
    // required int32 proxy_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proxy_port());
  }

  return total_size;
}
int l2c_login::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:login.l2c_login)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 msg_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_id());

    // required int32 status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

    // required string proxy_ip = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proxy_ip());

    // required int32 proxy_port = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->proxy_port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void l2c_login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:login.l2c_login)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const l2c_login* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const l2c_login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:login.l2c_login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:login.l2c_login)
    MergeFrom(*source);
  }
}

void l2c_login::MergeFrom(const l2c_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:login.l2c_login)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_proxy_ip()) {
      set_has_proxy_ip();
      proxy_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proxy_ip_);
    }
    if (from.has_proxy_port()) {
      set_proxy_port(from.proxy_port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void l2c_login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:login.l2c_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void l2c_login::CopyFrom(const l2c_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:login.l2c_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool l2c_login::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void l2c_login::Swap(l2c_login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void l2c_login::InternalSwap(l2c_login* other) {
  std::swap(msg_id_, other->msg_id_);
  std::swap(status_, other->status_);
  proxy_ip_.Swap(&other->proxy_ip_);
  std::swap(proxy_port_, other->proxy_port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata l2c_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = l2c_login_descriptor_;
  metadata.reflection = l2c_login_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// l2c_login

// required int32 msg_id = 1;
bool l2c_login::has_msg_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void l2c_login::set_has_msg_id() {
  _has_bits_[0] |= 0x00000001u;
}
void l2c_login::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void l2c_login::clear_msg_id() {
  msg_id_ = 0;
  clear_has_msg_id();
}
 ::google::protobuf::int32 l2c_login::msg_id() const {
  // @@protoc_insertion_point(field_get:login.l2c_login.msg_id)
  return msg_id_;
}
 void l2c_login::set_msg_id(::google::protobuf::int32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:login.l2c_login.msg_id)
}

// required int32 status = 2;
bool l2c_login::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void l2c_login::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void l2c_login::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void l2c_login::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::google::protobuf::int32 l2c_login::status() const {
  // @@protoc_insertion_point(field_get:login.l2c_login.status)
  return status_;
}
 void l2c_login::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:login.l2c_login.status)
}

// required string proxy_ip = 3;
bool l2c_login::has_proxy_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void l2c_login::set_has_proxy_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void l2c_login::clear_has_proxy_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void l2c_login::clear_proxy_ip() {
  proxy_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proxy_ip();
}
 const ::std::string& l2c_login::proxy_ip() const {
  // @@protoc_insertion_point(field_get:login.l2c_login.proxy_ip)
  return proxy_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void l2c_login::set_proxy_ip(const ::std::string& value) {
  set_has_proxy_ip();
  proxy_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:login.l2c_login.proxy_ip)
}
 void l2c_login::set_proxy_ip(const char* value) {
  set_has_proxy_ip();
  proxy_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:login.l2c_login.proxy_ip)
}
 void l2c_login::set_proxy_ip(const char* value, size_t size) {
  set_has_proxy_ip();
  proxy_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:login.l2c_login.proxy_ip)
}
 ::std::string* l2c_login::mutable_proxy_ip() {
  set_has_proxy_ip();
  // @@protoc_insertion_point(field_mutable:login.l2c_login.proxy_ip)
  return proxy_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* l2c_login::release_proxy_ip() {
  // @@protoc_insertion_point(field_release:login.l2c_login.proxy_ip)
  clear_has_proxy_ip();
  return proxy_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void l2c_login::set_allocated_proxy_ip(::std::string* proxy_ip) {
  if (proxy_ip != NULL) {
    set_has_proxy_ip();
  } else {
    clear_has_proxy_ip();
  }
  proxy_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proxy_ip);
  // @@protoc_insertion_point(field_set_allocated:login.l2c_login.proxy_ip)
}

// required int32 proxy_port = 4;
bool l2c_login::has_proxy_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void l2c_login::set_has_proxy_port() {
  _has_bits_[0] |= 0x00000008u;
}
void l2c_login::clear_has_proxy_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void l2c_login::clear_proxy_port() {
  proxy_port_ = 0;
  clear_has_proxy_port();
}
 ::google::protobuf::int32 l2c_login::proxy_port() const {
  // @@protoc_insertion_point(field_get:login.l2c_login.proxy_port)
  return proxy_port_;
}
 void l2c_login::set_proxy_port(::google::protobuf::int32 value) {
  set_has_proxy_port();
  proxy_port_ = value;
  // @@protoc_insertion_point(field_set:login.l2c_login.proxy_port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace login

// @@protoc_insertion_point(global_scope)
